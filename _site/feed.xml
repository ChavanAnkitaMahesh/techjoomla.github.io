<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-09-14T16:50:51+05:30</updated><id>http://localhost:4000/</id><title type="html">Techjoomla</title><subtitle>Joomla Extensions for chat, crowdfunding and more.</subtitle><author><name>{&quot;name&quot;=&gt;nil, &quot;email&quot;=&gt;&quot;contact@techjoomla.com&quot;, &quot;twitter&quot;=&gt;&quot;techjoomla&quot;}</name><email>contact@techjoomla.com</email></author><entry><title type="html">Writing your own API Plugin</title><link href="http://localhost:4000/apis/plugin-development/" rel="alternate" type="text/html" title="Writing your own API Plugin" /><published>2017-01-15T00:00:00+05:30</published><updated>2017-01-15T00:00:00+05:30</updated><id>http://localhost:4000/apis/plugin-development</id><content type="html" xml:base="http://localhost:4000/apis/plugin-development/">&lt;h1 id=&quot;writing-your-own-api-plugin&quot;&gt;Writing your own API Plugin&lt;/h1&gt;

&lt;p&gt;Each resorce can support the GET, POST and DELETE operations. These are exposed by creating methods of the same name, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;post()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;delete()&lt;/code&gt; in each of the resources. If a resouce URL is accessed via HTTP POST, the post() method is called, and similarly for the rest.&lt;/p&gt;

&lt;h2 id=&quot;api-plugin-file-structure&quot;&gt;API plugin file structure&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;language/en-GB - Resource folder having resource file, keep name same as plugin name.
    &lt;ul&gt;
      &lt;li&gt;en-GB.plg_api_users.ini - add plugin language constant.&lt;/li&gt;
      &lt;li&gt;en-GB.plg_api_users.sys.ini&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;users - Resource folder having resource file, keep name same as plugin name.
    &lt;ul&gt;
      &lt;li&gt;login.php - Resource file&lt;/li&gt;
      &lt;li&gt;users.php - Resource file&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;users.php - plugin file&lt;/li&gt;
  &lt;li&gt;users.xml - xml file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can add multiple resource in resource folder and use them for different purpose. Usually, each resource will map to an object type for your extension.&lt;/p&gt;

&lt;h2 id=&quot;create-plugin-entry-file-usersphp-file&quot;&gt;Create plugin entry file users.php file&lt;/h2&gt;
&lt;p&gt;This is the entry file for the API plugin, the things that re deifned in the file are resource locations, and making certain resources public. Below is the code for the file -&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jimport('joomla.plugin.plugin');
//class structure example
class plgAPIUsers extends ApiPlugin
{
	public function __construct(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;$subject, $config = array())
	{
		parent::__construct($subject, $config = array());
		
		// Set resource path
		ApiResource::addIncludePath(dirname(__FILE__).'/users');
		
		// Load language files
		$lang = JFactory::getLanguage(); 
		$lang-&amp;gt;load('com_users', JPATH_ADMINISTRATOR, '', true);
		
		// Set the login resource to be public
		$this-&amp;gt;setResourceAccess('login', 'public', 'post');
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;create-resource-file-loginphp-file&quot;&gt;Create resource file login.php file&lt;/h2&gt;
&lt;p&gt;Although you can place the resource files anywhere, the recommended approach is to place them within a folder inside your plugin.  Below is example code for a resource file. Notice how the methods get() and post() are implemented. The methods may return an array or an object which will be automatically converted to JSON or XML.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsersApiResourceLogin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApiResource&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\stdClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;
		 
		&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Add your code here
&lt;/span&gt;		
		&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The array or object from the plugin should be set via &lt;code class=&quot;highlighter-rouge&quot;&gt;$this-&amp;gt;plugin-&amp;gt;setResponse()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;error-handling&quot;&gt;Error Handling&lt;/h2&gt;
&lt;p&gt;It is possible to send HTTP errors with the right HTTP codes using the &lt;code class=&quot;highlighter-rouge&quot;&gt;APIError::raiseError()&lt;/code&gt; method. Depending on the type of error you can raise different Exceptions that set the appropriate HTTP code.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Validation Error sets HTTP 400
&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;ApiError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;raiseError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Invalid Email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'APIValidationException'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Access Error sets HTTP 403
&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;ApiError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;raiseError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Not authorised&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'APIUnauthorisedException'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Not Found Error sets HTTP 404
&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;ApiError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;raiseError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Record not found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'APINotFoundException'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// General Error sets HTTP 400
&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;ApiError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;raiseError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bad Request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'APIException'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You are free to specify your own error code and message. It is also possible to add more Exceptions in the &lt;code class=&quot;highlighter-rouge&quot;&gt;components/com_api/libraries/exceptions&lt;/code&gt; folder. When using &lt;code class=&quot;highlighter-rouge&quot;&gt;APIError::raiseError()&lt;/code&gt; there is no need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;$this-&amp;gt;plugin-&amp;gt;setResponse()&lt;/code&gt; since com_api handles the response and setting the http code.&lt;/p&gt;

&lt;p&gt;Note : The exception classes extend PHP’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt; class. So you will need to use numeric only codes, since PHP does not support non-numeric Exception codes.&lt;/p&gt;

&lt;h2 id=&quot;private-and-public-resources&quot;&gt;Private and public resources&lt;/h2&gt;

&lt;p&gt;Unless specified, all resources are private, which means an API token is needed to access. However, it is possible to make certain resource and methods public by using the setResourceAccess() access method as&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$this-&amp;gt;setResourceAccess('login', 'public', 'post') 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first parameter is the resource name, second is status (should be public to make it public) and last is HTTP method to make public. Setting a resource public will mean that the API URL for that resource will not need any authentication.&lt;/p&gt;

&lt;h2 id=&quot;access-control&quot;&gt;Access Control&lt;/h2&gt;
&lt;p&gt;ACL needs to be handled by the respective plugins. com_api makes a &lt;code class=&quot;highlighter-rouge&quot;&gt;$this-&amp;gt;user&lt;/code&gt; object available in the resource class. This is same as the JFactory::getUser() object for the user to whom the token belongs. It is upto the resource to use the user object and apply the necessary access control and produce authorisation errors.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExamplesApiResourceExample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApiResource&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Will dump the object for the user who is making the API call
&lt;/span&gt;		&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;create-xml-file&quot;&gt;Create .xml file&lt;/h2&gt;
&lt;p&gt;Finally create a manifest XML so that your plugin can be installed. Set group as ‘api’, add plugin name and other details.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;extension&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3.0.0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;plugin&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;group=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;api&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;upgrade&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;YourPlugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;creationDate&amp;gt;&lt;/span&gt;10/11/2016&lt;span class=&quot;nt&quot;&gt;&amp;lt;/creationDate&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;author&amp;gt;&amp;lt;/author&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;files&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;filename&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;plugin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;your_plugin_name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;your_plugin_name.php&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filename&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;folder&amp;gt;&lt;/span&gt;your_plugin_name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/folder&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/files&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;languages&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;folder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;language&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;language&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en-GB&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;en-GB/en-GB.plg_api_plugin_name.ini&lt;span class=&quot;nt&quot;&gt;&amp;lt;/language&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;language&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en-GB&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;en-GB/en-GB.plg_api_plugin_name.sys.ini&lt;span class=&quot;nt&quot;&gt;&amp;lt;/language&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/languages&amp;gt;&lt;/span&gt;
	
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/extension&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;tips-for-writing-plugins&quot;&gt;Tips for writing plugins&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Think of API plugins as a replacement of controllers. Any business logic that you won’t put in a controller, leave it out of the plugin too. Load and use your models in the plugin code.&lt;/li&gt;
  &lt;li&gt;It is not recommended to have API specific language files unless absolutely necessary. You will ususally make plugins for an existing component, so load the language files from that component.&lt;/li&gt;
  &lt;li&gt;To create the list and details for an object type, you can either add a condition based on &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; query parameter in the &lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt; method, or have a separate resource for the list.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;name&quot;=&gt;nil, &quot;email&quot;=&gt;&quot;contact@techjoomla.com&quot;, &quot;twitter&quot;=&gt;&quot;techjoomla&quot;}</name><email>contact@techjoomla.com</email></author><summary type="html">Writing your own API Plugin</summary></entry><entry><title type="html">Introduction</title><link href="http://localhost:4000/apis/introduction/" rel="alternate" type="text/html" title="Introduction" /><published>2017-01-15T00:00:00+05:30</published><updated>2017-01-15T00:00:00+05:30</updated><id>http://localhost:4000/apis/introduction</id><content type="html" xml:base="http://localhost:4000/apis/introduction/">&lt;h1 id=&quot;api-framework-for-joomla&quot;&gt;API framework for Joomla&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;com_api is a quick and easy way to add REST APIs to Joomla. Extendible via plugins, you an easily add support for more Joomla extensions. To get started, download the component and install the API plugins you need. Enable the plugins and you are ready to fetch your content via APIs&lt;/p&gt;

&lt;h2 id=&quot;using-apis&quot;&gt;Using APIs&lt;/h2&gt;

&lt;p&gt;To add additional resources to the API, plugins need to be created. Each plugin can provide multiple API resources. Plugins are a convenient way to group several resources. Eg: A single plugin could be created for Quick2Cart with separate resources for products, cart, checkout, orders etc.&lt;/p&gt;

&lt;h2 id=&quot;plugin-terms&quot;&gt;Plugin Terms&lt;/h2&gt;

&lt;h3 id=&quot;app&quot;&gt;app&lt;/h3&gt;
&lt;p&gt;An app is essentially a Joomla plugin. However the plugin itself does nothing more than load the resources it contains. So the app is mainly used to package the API plugin and to enable adding any API specific parameters. Each app will have one or more resources.&lt;/p&gt;

&lt;h3 id=&quot;resource&quot;&gt;resource&lt;/h3&gt;
&lt;p&gt;Resources are files that have code to accept input and set the API output. You will usually have multiple resources in an app. A common use case is for an extension like Easysocial or Jomsocial to have a single app. The app contains resources for various objects like groups, events, photos, newsfeed etc. The resource will contain the methods &lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;post()&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;delete()&lt;/code&gt; to perform CRUD operations on that type of object.&lt;/p&gt;

&lt;h3 id=&quot;key--token&quot;&gt;key / token&lt;/h3&gt;
&lt;p&gt;The key is used to access authenticated resources. The admin section allows you to create keys. It’s also possible to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/user/login&lt;/code&gt; API to login using username and password and get a token in response.&lt;/p&gt;

&lt;h2 id=&quot;calling-resources&quot;&gt;Calling resources&lt;/h2&gt;

&lt;h3 id=&quot;api-urls&quot;&gt;API URLs&lt;/h3&gt;
&lt;p&gt;The URL to access any route is of the format -&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/api/{plugin}/{resource}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Tip : If your resource expects an &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; parameter in the URL, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/{plugin}/{resource}/{id}&lt;/code&gt; as the API url. Other querystring need to be sent as is.&lt;/p&gt;

&lt;p&gt;To enable SEF URLs for endpoints, make sure you have created a Joomla menu of the type API &amp;gt; API Endpoint. If you create the menu using any other alias than &lt;code class=&quot;highlighter-rouge&quot;&gt;api&lt;/code&gt; make sure you use the apppropriate slug in the endpoint. If you do not have SEF URLs enabled, use  the endpoint URL as index.php?option=com_api&amp;amp;app={app}&amp;amp;resource={resource}&amp;amp;format=raw.&lt;/p&gt;

&lt;h3 id=&quot;authentication&quot;&gt;Authentication&lt;/h3&gt;
&lt;p&gt;The API token is used for authentication. The token needs to be passed via the Authorization header using the Bearer scheme eg: &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code&gt;. Previous versions also allowed passing the token as a querystring variable with the name &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;. The querystring approach will be deprecated in the future version. It is possible for an app to make an entire resource or a specific HTTP method in a resource public&lt;/p&gt;

&lt;p&gt;Note : Sometimes Apache does not pass on the Authorization header, in such cases send then token using the X-Authorization header i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;X-Authorization: Bearer {token}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;output-format&quot;&gt;Output Format&lt;/h3&gt;
&lt;p&gt;The default output format is JSON. However it’s also possible to get XML output by setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;Accept: application/xml&lt;/code&gt; header.&lt;/p&gt;

&lt;h2 id=&quot;overriding-output&quot;&gt;Overriding Output&lt;/h2&gt;
&lt;p&gt;If you wish to modify the ‘envelope’ of the response, you can copy the file &lt;code class=&quot;highlighter-rouge&quot;&gt;components/com_api/libraries/response/jsonresponse.php&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;templates/{your template}/json/api.php&lt;/code&gt; and modify the structure of the output. A similar override is possible for XML as well.&lt;/p&gt;

&lt;h1 id=&quot;writing-your-own-api-plugin&quot;&gt;Writing your own API Plugin&lt;/h1&gt;
&lt;p&gt;Each resorce can support the GET, POST and DELETE operations. These are exposed by creating methods of the same name, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;post()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;delete()&lt;/code&gt; in each of the resources. If a resouce URL is accessed via HTTP POST, the post() method is called, and similarly for the rest.&lt;/p&gt;

&lt;h3 id=&quot;api-plugin-file-structure&quot;&gt;API plugin file structure&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;language/en-GB - Resource folder having resource file, keep name same as plugin name.
    &lt;ul&gt;
      &lt;li&gt;en-GB.plg_api_users.ini - add plugin language constant.&lt;/li&gt;
      &lt;li&gt;en-GB.plg_api_users.sys.ini&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;users - Resource folder having resource file, keep name same as plugin name.
    &lt;ul&gt;
      &lt;li&gt;login.php - Resource file&lt;/li&gt;
      &lt;li&gt;users.php - Resource file&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;users.php - plugin file&lt;/li&gt;
  &lt;li&gt;users.xml - xml file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can add multiple resource in resource folder and use them for different purpose. Usually, each resource will map to an object type for your extension.&lt;/p&gt;

&lt;h3 id=&quot;create-plugin-entry-file-usersphp-file&quot;&gt;Create plugin entry file users.php file&lt;/h3&gt;
&lt;p&gt;This is the entry file for the API plugin, the things that re deifned in the file are resource locations, and making certain resources public. Below is the code for the file -&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jimport('joomla.plugin.plugin');
//class structure example
class plgAPIUsers extends ApiPlugin
{
	public function __construct(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;$subject, $config = array())
	{
		parent::__construct($subject, $config = array());
		
		// Set resource path
		ApiResource::addIncludePath(dirname(__FILE__).'/users');
		
		// Load language files
		$lang = JFactory::getLanguage(); 
		$lang-&amp;gt;load('com_users', JPATH_ADMINISTRATOR, '', true);
		
		// Set the login resource to be public
		$this-&amp;gt;setResourceAccess('login', 'public', 'post');
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-resource-file-loginphp-file&quot;&gt;Create resource file login.php file&lt;/h3&gt;
&lt;p&gt;Although you can place the resource files anywhere, the recommended approach is to place them within a folder inside your plugin.  Below is example code for a resource file. Notice how the methods get() and post() are implemented. The methods may return an array or an object which will be automatically converted to JSON or XML.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsersApiResourceLogin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApiResource&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\stdClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;
		 
		&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Add your code here
&lt;/span&gt;		
		&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The array or object from the plugin should be set via &lt;code class=&quot;highlighter-rouge&quot;&gt;$this-&amp;gt;plugin-&amp;gt;setResponse()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;error-handling&quot;&gt;Error Handling&lt;/h3&gt;
&lt;p&gt;It is possible to send HTTP errors with the right HTTP codes using the &lt;code class=&quot;highlighter-rouge&quot;&gt;APIError::raiseError()&lt;/code&gt; method. Depending on the type of error you can raise different Exceptions that set the appropriate HTTP code.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Validation Error sets HTTP 400
&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;ApiError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;raiseError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Invalid Email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'APIValidationException'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Access Error sets HTTP 403
&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;ApiError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;raiseError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Not authorised&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'APIUnauthorisedException'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Not Found Error sets HTTP 404
&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;ApiError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;raiseError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Record not found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'APINotFoundException'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// General Error sets HTTP 400
&lt;/span&gt;		&lt;span class=&quot;nx&quot;&gt;ApiError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;raiseError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bad Request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'APIException'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You are free to specify your own error code and message. It is also possible to add more Exceptions in the &lt;code class=&quot;highlighter-rouge&quot;&gt;components/com_api/libraries/exceptions&lt;/code&gt; folder. When using &lt;code class=&quot;highlighter-rouge&quot;&gt;APIError::raiseError()&lt;/code&gt; there is no need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;$this-&amp;gt;plugin-&amp;gt;setResponse()&lt;/code&gt; since com_api handles the response and setting the http code.&lt;/p&gt;

&lt;p&gt;Note : The exception classes extend PHP’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt; class. So you will need to use numeric only codes, since PHP does not support non-numeric Exception codes.&lt;/p&gt;

&lt;h3 id=&quot;private-and-public-resources&quot;&gt;Private and public resources&lt;/h3&gt;

&lt;p&gt;Unless specified, all resources are private, which means an API token is needed to access. However, it is possible to make certain resource and methods public by using the setResourceAccess() access method as&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$this-&amp;gt;setResourceAccess('login', 'public', 'post') 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first parameter is the resource name, second is status (should be public to make it public) and last is HTTP method to make public. Setting a resource public will mean that the API URL for that resource will not need any authentication.&lt;/p&gt;

&lt;h3 id=&quot;access-control&quot;&gt;Access Control&lt;/h3&gt;
&lt;p&gt;ACL needs to be handled by the respective plugins. com_api makes a &lt;code class=&quot;highlighter-rouge&quot;&gt;$this-&amp;gt;user&lt;/code&gt; object available in the resource class. This is same as the JFactory::getUser() object for the user to whom the token belongs. It is upto the resource to use the user object and apply the necessary access control and produce authorisation errors.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExamplesApiResourceExample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApiResource&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Will dump the object for the user who is making the API call
&lt;/span&gt;		&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-xml-file&quot;&gt;Create .xml file&lt;/h3&gt;
&lt;p&gt;Finally create a manifest XML so that your plugin can be installed. Set group as ‘api’, add plugin name and other details.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;extension&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3.0.0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;plugin&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;group=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;api&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;upgrade&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;YourPlugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;creationDate&amp;gt;&lt;/span&gt;10/11/2016&lt;span class=&quot;nt&quot;&gt;&amp;lt;/creationDate&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;author&amp;gt;&amp;lt;/author&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;files&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;filename&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;plugin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;your_plugin_name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;your_plugin_name.php&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filename&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;folder&amp;gt;&lt;/span&gt;your_plugin_name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/folder&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/files&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;languages&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;folder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;language&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;language&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en-GB&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;en-GB/en-GB.plg_api_plugin_name.ini&lt;span class=&quot;nt&quot;&gt;&amp;lt;/language&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;language&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tag=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en-GB&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;en-GB/en-GB.plg_api_plugin_name.sys.ini&lt;span class=&quot;nt&quot;&gt;&amp;lt;/language&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/languages&amp;gt;&lt;/span&gt;
	
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/extension&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tips-for-writing-plugins&quot;&gt;Tips for writing plugins&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Think of API plugins as a replacement of controllers. Any business logic that you won’t put in a controller, leave it out of the plugin too. Load and use your models in the plugin code.&lt;/li&gt;
  &lt;li&gt;It is not recommended to have API specific language files unless absolutely necessary. You will ususally make plugins for an existing component, so load the language files from that component.&lt;/li&gt;
  &lt;li&gt;To create the list and details for an object type, you can either add a condition based on &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; query parameter in the &lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt; method, or have a separate resource for the list.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;name&quot;=&gt;nil, &quot;email&quot;=&gt;&quot;contact@techjoomla.com&quot;, &quot;twitter&quot;=&gt;&quot;techjoomla&quot;}</name><email>contact@techjoomla.com</email></author><summary type="html">API framework for Joomla</summary></entry><entry><title type="html">Quick look at the new UI !</title><link href="http://localhost:4000/jticketing%202.0/jticketingui/" rel="alternate" type="text/html" title="Quick look at the new UI !" /><published>2017-01-15T00:00:00+05:30</published><updated>2017-01-15T00:00:00+05:30</updated><id>http://localhost:4000/jticketing%202.0/jticketingui</id><content type="html" xml:base="http://localhost:4000/jticketing%202.0/jticketingui/"></content><author><name>{&quot;name&quot;=&gt;nil, &quot;email&quot;=&gt;&quot;contact@techjoomla.com&quot;, &quot;twitter&quot;=&gt;&quot;techjoomla&quot;}</name><email>contact@techjoomla.com</email></author><summary type="html"></summary></entry><entry><title type="html">Introduction</title><link href="http://localhost:4000/tjreports/introduction/" rel="alternate" type="text/html" title="Introduction" /><published>2017-01-15T00:00:00+05:30</published><updated>2017-01-15T00:00:00+05:30</updated><id>http://localhost:4000/tjreports/introduction</id><content type="html" xml:base="http://localhost:4000/tjreports/introduction/">&lt;h1 id=&quot;tj-reports---universal-reporting-engine-for-joomla&quot;&gt;TJ Reports - Universal Reporting Engine for Joomla&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;TJ Reports is a horizontal/Infrastructure extension for Joomla that allows developers to develop reporting plugins with ease along with providing extensive reporting capabilities in their extensions. Features include extension specific and multi extension reports, Report default configuration, Report customisation and CSV exports to name a few.&lt;/p&gt;

&lt;p&gt;Please refer the Wiki for documentation on how to create your own Reporting plugins and integrate it with your extensions.&lt;/p&gt;</content><author><name>{&quot;name&quot;=&gt;nil, &quot;email&quot;=&gt;&quot;contact@techjoomla.com&quot;, &quot;twitter&quot;=&gt;&quot;techjoomla&quot;}</name><email>contact@techjoomla.com</email></author><summary type="html">TJ Reports - Universal Reporting Engine for Joomla</summary></entry></feed>